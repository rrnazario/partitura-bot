// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TelegramPartHook.Domain.Aggregations.InstagramCacheAggregation;
using TelegramPartHook.Domain.SeedWork;
using TelegramPartHook.Infrastructure.Persistence;

#nullable disable

namespace TelegramPartHook.Infrastructure.Migrations
{
    [DbContext(typeof(BotContext))]
    [Migration("20250116174415_AddReportImagesTable")]
    partial class AddReportImagesTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TelegramPartHook.Domain.Aggregations.ConfigAggregation.Config", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<object>("Value")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("id");

                    b.HasIndex("Name");

                    b.ToTable("config", "public");
                });

            modelBuilder.Entity("TelegramPartHook.Domain.Aggregations.InstagramCacheAggregation.InstagramCache", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("EndCursor")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("endcursor");

                    b.Property<long>("GraphqlId")
                        .HasColumnType("bigint")
                        .HasColumnName("graphqlid");

                    b.Property<InstagramItem[]>("Items")
                        .HasColumnType("jsonb")
                        .HasColumnName("items");

                    b.Property<string>("PageName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pagename");

                    b.HasKey("id");

                    b.ToTable("instacache", "public");
                });

            modelBuilder.Entity("TelegramPartHook.Domain.Aggregations.ReportImageAggregation.ReportImage", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Terms")
                        .HasColumnType("jsonb");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("report_images", "public");
                });

            modelBuilder.Entity("TelegramPartHook.Domain.Aggregations.SearchCacheAggregation.SearchCache", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("AddedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<SheetSearchResult[]>("Results")
                        .HasColumnType("jsonb")
                        .HasColumnName("results");

                    b.Property<string>("Term")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("term");

                    b.HasKey("id");

                    b.HasIndex("Term");

                    b.ToTable("search", "public");
                });

            modelBuilder.Entity("TelegramPartHook.Domain.Aggregations.UserAggregation.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("Repertoire")
                        .HasColumnType("jsonb")
                        .HasColumnName("repertoire");

                    b.Property<string>("activetokens")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("")
                        .HasColumnName("activetokens");

                    b.Property<string>("culture")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("en")
                        .HasColumnName("culture");

                    b.Property<string>("fullname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fullname");

                    b.Property<bool>("isvip")
                        .HasColumnType("boolean")
                        .HasColumnName("isvip");

                    b.Property<string>("lastsearchdate")
                        .HasColumnType("text")
                        .HasColumnName("lastsearchdate");

                    b.Property<int>("searchescount")
                        .HasColumnType("integer")
                        .HasColumnName("searchescount");

                    b.Property<string>("searchesok")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("")
                        .HasColumnName("searchesok");

                    b.Property<string>("searchesscheduled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("")
                        .HasColumnName("searchesscheduled");

                    b.Property<string>("telegramid")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("telegramid");

                    b.Property<bool>("unsubscribe")
                        .HasColumnType("boolean")
                        .HasColumnName("unsubscribe");

                    b.Property<string>("vipinformation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("")
                        .HasColumnName("vipinformation");

                    b.HasKey("id");

                    b.ToTable("client", "public");
                });

            modelBuilder.Entity("TelegramPartHook.Infrastructure.Models.AppError", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("Content")
                        .HasColumnType("jsonb")
                        .HasColumnName("content");

                    b.Property<string>("ErrorDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("error_date");

                    b.HasKey("id");

                    b.ToTable("apperror", "public");
                });
#pragma warning restore 612, 618
        }
    }
}
